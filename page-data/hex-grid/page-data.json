{"componentChunkName":"component---src-templates-blog-post-js","path":"/hex-grid/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"b646e193-44c3-5501-96ad-825bdd9e3f3a","excerpt":"In this article we are going to learn how to get a perfect hexagon grid using JavaScript to draw on a HTML canvas. We first need to know a bit of trigonometry…","html":"<p>In this article we are going to learn how to get a perfect hexagon grid using JavaScript to draw on a HTML canvas. We first need to know a bit of trigonometry to solve this problem as it is necessary for all the calculations for the coordinate points composing a regular polygon.</p>\n<h2>The Basics</h2>\n<p>First of all, we introduce a regular hexagon that is composed of six equal sides.</p>\n<div style=\"text-align:center\"><img src=\"/f6c3552346a2bee79f9d4f616143a811/hex.svg\" alt=\"hexagon\" width=\"150\"></div>\n<p>Any regular polygon can be inscribed within a circumference of radius <strong>r</strong></p>\n<div style=\"text-align:center\"><img src=\"/fb798448f4bb72e11b6f701141e6cf44/circumference.svg\" alt=\"circumference\" width=\"250\"></div>\n<p>So each of its vertex intersects with the circumference. Starting that the center of the circumference is the point of origin <em>(0,0)</em> we can easily calculate the most-right and most-left vertex are <em>(<strong>r</strong>, 0)</em> and <em>(-<strong>r</strong>,0)</em> respectively, however, what are the positions of the rest of the points? Here is where trigonometry comes into play.</p>\n<p>Given any equilateral triangle, the following trigonometric functions applies:</p>\n<div style=\"text-align:center\"><img src=\"/e1a78d00b463587772f7a422cd9cc181/trigo.svg\" alt=\"trigonometry\" width=\"250\"></div>\n<p>It is very useful to know any side of the triangle if you know one of its other sides and the angle it forms. For this case, the angle formed by each vertex with the horizontal axis is equal by dividing the circumference by the number of sides (360º / 6= <strong>60º</strong>) and we also know that the hypotenuse is equal to the radius of the circumference <strong>r</strong>. From the first equation we can say that a = c <em> sinα and b = c </em>cosα. In resume, putting altogether the second vertex coordinates are <em>(<strong>rcos60º</strong>,<strong>rsin60º</strong>)</em>.</p>\n<p><img src=\"/e54179cfce3b7e01ada66b0ee7d3beb4/trigo2.svg\"></p>\n<p>Then the rest comes as a multiple of 60º as 120º, 180º, 240º, 300º and 360º which is equal to 0º again. Notice that the most-right and most-left vertex coincide what we have expected due to sin0º = 0, cos0º = 1, cos180º = -1 and sin0º = 0. These are the resulting vertex:</p>\n<p><img src=\"/8124cf09214dbaf0e8a7b3bacaab141b/trigo3.svg\"></p>\n<h2>First Step: An Hexagon</h2>\n<p>As this point we can start a new project to put in practice all we have seen. In a <strong>index.html</strong> file we set the minimum required fields for an HTML canvas:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE HTML></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>HexGrid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>canvas<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>800<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>And a <strong>main.js</strong> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As far as we know, we are going to set up the angle and the size of the hexagon as constants. Notice the angles are needed to be expressed in radians (360º = 2π rad)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In order to draw a regular hexagon we define a function named <em>drawHexagon(x,y)</em> being <em>x</em> and <em>y</em> the center point. We are going to use a path that allows to set the coordinates before drawing them and when finished we use <em>stroke()</em> to draw only the border line. It is possible doing a <em>for loop</em> to draw a line between each vertex so the result is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">drawHexagon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Before testing it, notice that the point <em>(0,0)</em> in our canvas starts on the upper left corner, so in order to fit the drawing we need a minimum offset of <strong>r</strong>.\n<img src=\"/e43e70506381d06f0d758f5d1ed8fd03/borders.svg\"></p>\n<h2>Result</h2>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"An Hex\" src=\"https://codepen.io/eperezcosano/embed/eYJXzXK?height=265&theme-id=light&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/eperezcosano/pen/eYJXzXK'>An Hex</a> by Ethan\n  (<a href='https://codepen.io/eperezcosano'>@eperezcosano</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h2>Second Step: The Row</h2>\n<p>Perfect! The next step is to draw a raw of hexagons, like that:</p>\n<p><img src=\"/7edc8cca90ccd1442481751622ce7a78/row.svg\"></p>\n<p>Essentially is important to know where is the next center going to be located to fit perfectly one to each other. First, notice how much horizontally is placed the purple arrow. It is a distance of the radius <strong>r</strong> plus a segment we already know as <strong>rcos60º</strong>. And same as vertically, a segment of <strong>rsin60º</strong> downwards. The procedure is always adding the same amount horizontally and alternating vertically.</p>\n<p>The code that allows to draw the four hexagons showed before is:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1st</span>\nx <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token function\">drawHexagon</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2nd</span>\nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> r <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">drawHexagon</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3rd</span>\nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> r <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> y <span class=\"token operator\">-</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">drawHexagon</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 4th</span>\nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> r <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">drawHexagon</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Result</h2>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Raw Row\" src=\"https://codepen.io/eperezcosano/embed/xxZBEwN?height=265&theme-id=light&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/eperezcosano/pen/xxZBEwN'>Raw Row</a> by Ethan\n  (<a href='https://codepen.io/eperezcosano'>@eperezcosano</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>We need to find the pattern that will allow to made this scalable.\nOn one hand, <em>x</em> could be written as a increment of:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> r <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That shortened is expressed as:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  x <span class=\"token operator\">+=</span> r <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>On the other hand, <em>y</em> is altering by adding or subtracting either is an even or an odd position:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">y <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Even position</span>\ny <span class=\"token operator\">=</span> y <span class=\"token operator\">-</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Odd position</span></code></pre></div>\n<p>How it could be written for a general case?\nLet’s assign a new variable <em>j</em> that increases just as it does the position we are in. If we use this mathematical trick, we can do like an if-statement for alternating either is an even or an odd number:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(-1) ** j = -1 when j is odd\n(-1) ** j = 1 when j is even</code></pre></div>\n<p>That is exactly what we are looking for! Let’s wrap in altogether, and <em>y</em> is expressed for every iteration as:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> j <span class=\"token operator\">*</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That shortened is expressed as:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">y <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> j<span class=\"token operator\">++</span> <span class=\"token operator\">*</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally we arrived at the solution how to draw many hexagons in a row as we want. We define a function named <em>drawGrid(width,height)</em> that prints what we just explained up to this point:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">drawGrid</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">width<span class=\"token punctuation\">,</span> height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> r<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> x <span class=\"token operator\">+=</span> r <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> j<span class=\"token operator\">++</span> <span class=\"token operator\">*</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">drawHexagon</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice we want that the next hexagon we are going to draw fits inside the canvas. Let’s test it out.</p>\n<h2>Result</h2>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"A row\" src=\"https://codepen.io/eperezcosano/embed/XWXGKwP?height=265&theme-id=light&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/eperezcosano/pen/XWXGKwP'>A row</a> by Ethan\n  (<a href='https://codepen.io/eperezcosano'>@eperezcosano</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h2>Third Step: The Grid</h2>\n<p>That is it! We are just one step away from success. All we need is to repeat the same procedure but in the row below repeatedly. But, how much lower it is from the original row? Let’s find it out:</p>\n<p><img src=\"/c92173d5dbbc6b8061598818d253339e/column.svg\"></p>\n<p>This would be a final scheme of our grid, showing the first four centers of each row to get a good view what is going on. From the center <em>(0,0)</em> we can see that the blue arrow takes a distance of twice the length of the hexagon height that sums up to <strong>2rsin60º</strong>. The rest is going to be the same taking into account this offset. We modify our function to draw many lines as the last hexagon fits in the canvas height.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">drawGrid</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">width<span class=\"token punctuation\">,</span> height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span> y <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> y <span class=\"token operator\">+=</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> r<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> x <span class=\"token operator\">+=</span> r <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> j<span class=\"token operator\">++</span> <span class=\"token operator\">*</span> r <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">drawHexagon</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s put altogether and try it out!</p>\n<h2>Result</h2>\n<iframe height=\"628\" style=\"width: 100%;\" scrolling=\"no\" title=\"A Grid\" src=\"https://codepen.io/eperezcosano/embed/vYLPXYO?height=628&theme-id=light&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/eperezcosano/pen/vYLPXYO'>A Grid</a> by Ethan\n  (<a href='https://codepen.io/eperezcosano'>@eperezcosano</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","frontmatter":{"title":"How to draw a hex grid on HTML Canvas","date":"July 23, 2020","description":"How to get a perfect hexagon grid using JavaScript to draw on a HTML canvas."}}},"pageContext":{"slug":"/hex-grid/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null}}}