<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Home]]></title><description><![CDATA[My personal blog of my programming proyects.]]></description><link>https://eperezcosano.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 28 Jul 2020 01:35:00 GMT</lastBuildDate><item><title><![CDATA[How to draw a hexagonal grid on HTML Canvas]]></title><description><![CDATA[In this article we are going to learn how to get a perfect hexagon grid using JavaScript to draw on a HTML canvas. We first need to know a…]]></description><link>https://eperezcosano.github.io/hex-grid/</link><guid isPermaLink="false">https://eperezcosano.github.io/hex-grid/</guid><pubDate>Thu, 23 Jul 2020 14:27:31 GMT</pubDate><content:encoded>&lt;p&gt;In this article we are going to learn how to get a perfect hexagon grid using JavaScript to draw on a HTML canvas. We first need to know a bit of trigonometry to solve this problem as it is necessary for all the calculations for the coordinate points composing a regular polygon.&lt;/p&gt;
&lt;h2 id=&quot;table-of-contents&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#table-of-contents&quot; aria-label=&quot;table of contents permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#the-basics&quot;&gt;The Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#a-hexagon&quot;&gt;A Hexagon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#a-row&quot;&gt;A Row&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-grid&quot;&gt;The Grid&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;the-basics&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-basics&quot; aria-label=&quot;the basics permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Basics&lt;/h2&gt;
&lt;p&gt;First of all, we introduce a regular hexagon that is composed of six equal sides.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/f6c3552346a2bee79f9d4f616143a811/hex.svg&quot; alt=&quot;hexagon&quot; width=&quot;150&quot;&gt;&lt;/div&gt;
&lt;p&gt;Any regular polygon can be inscribed within a circumference of radius &lt;strong&gt;r&lt;/strong&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/fb798448f4bb72e11b6f701141e6cf44/circumference.svg&quot; alt=&quot;circumference&quot; width=&quot;250&quot;&gt;&lt;/div&gt;
&lt;p&gt;So each of its vertexes intersects with the circumference. Drawing from the premise that the center of the circumference is the point of origin &lt;em&gt;(0,0)&lt;/em&gt; we can easily calculate the most-right and most-left vertex are &lt;em&gt;(&lt;strong&gt;r&lt;/strong&gt;, 0)&lt;/em&gt; and &lt;em&gt;(-&lt;strong&gt;r&lt;/strong&gt;,0)&lt;/em&gt; respectively, however, what are the positions of the rest of the points? Here is where trigonometry comes into play.&lt;/p&gt;
&lt;p&gt;Given any right triangle, the following trigonometric functions applies:&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/e1a78d00b463587772f7a422cd9cc181/trigo.svg&quot; alt=&quot;trigonometry&quot; width=&quot;250&quot;&gt;&lt;/div&gt;
&lt;p&gt;It is very useful to know any side of the triangle if you know one of its other sides and the angle it forms. For this case, the angle formed by each vertex with the horizontal axis is equal by dividing the circumference by the number of sides (360º / 6 = &lt;strong&gt;60º&lt;/strong&gt;) and we also know that the hypotenuse is equal to the radius of the circumference &lt;strong&gt;r&lt;/strong&gt;. From the first equation we can say that a = c &lt;em&gt; sinα and b = c &lt;/em&gt;cosα. In summary, putting altogether the second vertex coordinates are &lt;em&gt;(&lt;strong&gt;rcos60º&lt;/strong&gt;,&lt;strong&gt;rsin60º&lt;/strong&gt;)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/e54179cfce3b7e01ada66b0ee7d3beb4/trigo2.svg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then the rest comes as a multiple of 60º as 120º, 180º, 240º, 300º and 360º which is equal to 0º again. Notice that the most-right and most-left vertex coincide with what we have expected due to sin0º = 0, cos0º = 1, cos180º = -1 and sin0º = 0. These are the resulting vertexes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/8124cf09214dbaf0e8a7b3bacaab141b/trigo3.svg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;a-hexagon&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a-hexagon&quot; aria-label=&quot;a hexagon permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Hexagon&lt;/h2&gt;
&lt;p&gt;As this point we can start a new project to put in practice all we have seen. In an &lt;strong&gt;index.html&lt;/strong&gt; file we set the minimum required fields for a HTML canvas:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;html&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
  	&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  	&amp;lt;title&amp;gt;HexGrid&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;canvas id=&amp;quot;canvas&amp;quot; width=&amp;quot;800&amp;quot; height=&amp;quot;500&amp;quot;/&amp;gt;
    &amp;lt;script src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;And a &lt;strong&gt;main.js&lt;/strong&gt; file:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;const canvas = document.getElementById(&amp;#39;canvas&amp;#39;);
const ctx = canvas.getContext(&amp;#39;2d&amp;#39;);

function init() {}
init();&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;As far as we know, we are going to set up the angle and the size of the hexagon as constants. Notice the angles are needed to be expressed in radians (360º = 2π rad)&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;const a = 2 * Math.PI / 6;
const r = 50;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;In order to draw a regular hexagon we define a function named &lt;em&gt;drawHexagon(x,y)&lt;/em&gt; being &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; the center point. We are going to use a path that allows to set the coordinates before drawing them and when finished we use &lt;em&gt;stroke()&lt;/em&gt; to draw only the border line. It is possible doing a &lt;em&gt;for loop&lt;/em&gt; to draw a line between each vertex so the result is as follows:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;function drawHexagon(x, y) {
  ctx.beginPath();
  for (var i = 0; i &amp;lt; 6; i++) {
    ctx.lineTo(x + r * Math.cos(a * i), y + r * Math.sin(a * i));
  }
  ctx.closePath();
  ctx.stroke();
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;Before testing it, notice that the point &lt;em&gt;(0,0)&lt;/em&gt; in our canvas starts on the upper left corner, so in order to fit the drawing we need a minimum offset of &lt;strong&gt;r&lt;/strong&gt;.
&lt;img src=&quot;/e43e70506381d06f0d758f5d1ed8fd03/borders.svg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;result&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#result&quot; aria-label=&quot;result permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Result&lt;/h3&gt;
&lt;iframe height=&quot;265&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;An Hex&quot; src=&quot;https://codepen.io/eperezcosano/embed/eYJXzXK?height=265&amp;theme-id=light&amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&apos;https://codepen.io/eperezcosano/pen/eYJXzXK&apos;&gt;An Hex&lt;/a&gt; by Ethan
  (&lt;a href=&apos;https://codepen.io/eperezcosano&apos;&gt;@eperezcosano&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;h2 id=&quot;a-row&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a-row&quot; aria-label=&quot;a row permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Row&lt;/h2&gt;
&lt;p&gt;Perfect! The next step is to draw a row of hexagons, like that:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/7edc8cca90ccd1442481751622ce7a78/row.svg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Essentially it is important to know where the next center is going to be located to fit perfectly with one another. First, notice how much horizontally is placed the purple arrow. It is a distance of the radius &lt;strong&gt;r&lt;/strong&gt; plus a segment we already know as &lt;strong&gt;rcos60º&lt;/strong&gt;. And same as vertically, a segment of &lt;strong&gt;rsin60º&lt;/strong&gt; downwards. The procedure is always adding the same amount horizontally and alternating vertically.&lt;/p&gt;
&lt;p&gt;The code that allows to draw the four hexagons showed before is:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;// 1st
x = r;
y = r;
drawHexagon(x, y);

// 2nd
x = x + r + r * Math.cos(a);
y = y + r * Math.sin(a);
drawHexagon(x, y);

// 3rd
x = x + r + r * Math.cos(a);
y = y - r * Math.sin(a);
drawHexagon(x, y);

// 4th
x = x + r + r * Math.cos(a);
y = y + r * Math.sin(a);
drawHexagon(x, y);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;result-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#result-1&quot; aria-label=&quot;result 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Result&lt;/h3&gt;
&lt;iframe height=&quot;265&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;Raw Row&quot; src=&quot;https://codepen.io/eperezcosano/embed/xxZBEwN?height=265&amp;theme-id=light&amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&apos;https://codepen.io/eperezcosano/pen/xxZBEwN&apos;&gt;Raw Row&lt;/a&gt; by Ethan
  (&lt;a href=&apos;https://codepen.io/eperezcosano&apos;&gt;@eperezcosano&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;We need to find the pattern that will allow to made this scalable.
On the one hand, &lt;em&gt;x&lt;/em&gt; could be written as a increment of:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;x = x + r + r * Math.cos(a);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;That shortened is expressed as:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;  x += r * (1 + Math.cos(a));&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;On the other hand, &lt;em&gt;y&lt;/em&gt; is altered between adding or subtracting whether it is an even or odd position:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;y = y + r * Math.sin(a); // Even position
y = y - r * Math.sin(a); // Odd position&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;How it could be written for a general case?
Let’s assign a new variable &lt;em&gt;j&lt;/em&gt; that increases just as it does the position we are in. If we use this mathematical trick, we can do like an if-statement for alternating whether is an even or an odd number:&lt;/p&gt;
&lt;deckgo-highlight-code   terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;(-1) ** j = -1 when j is odd
(-1) ** j = 1 when j is even&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;That is exactly what we were looking for! Let’s wrap in altogether, and &lt;em&gt;y&lt;/em&gt; is expressed for every iteration as:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;j++;
y = y + (-1) ** j * r * Math.sin(a);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;That shortened is expressed as:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;y += (-1) ** j++ * r * Math.sin(a);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;Finally we arrive to the solution on how to draw many hexagons in a row as we initially intended. We define a function named &lt;em&gt;drawGrid(width,height)&lt;/em&gt; that prints what we have just explained up to this point:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;function drawGrid(width, height) {
  let y = r;
  for (let x = r, j = 0; x + r * (1 + Math.cos(a)) &amp;lt; width; x += r * (1 + Math.cos(a)), y += (-1) ** j++ * r * Math.sin(a)) {
    drawHexagon(x, y);
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;Notice whether the subsequent hexagon, in every iteration, that we are going to draw fits inside the canvas.&lt;/p&gt;
&lt;h3 id=&quot;result-2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#result-2&quot; aria-label=&quot;result 2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Result&lt;/h3&gt;
&lt;iframe height=&quot;265&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;A row&quot; src=&quot;https://codepen.io/eperezcosano/embed/XWXGKwP?height=265&amp;theme-id=light&amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&apos;https://codepen.io/eperezcosano/pen/XWXGKwP&apos;&gt;A row&lt;/a&gt; by Ethan
  (&lt;a href=&apos;https://codepen.io/eperezcosano&apos;&gt;@eperezcosano&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;h2 id=&quot;the-grid&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-grid&quot; aria-label=&quot;the grid permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Grid&lt;/h2&gt;
&lt;p&gt;That is it! We are just one step away from success. All we need is to repeat the same procedure but in the row below repeatedly. But, how much lower is it from the original row? Let’s find it out:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/c92173d5dbbc6b8061598818d253339e/column.svg&quot;&gt;&lt;/p&gt;
&lt;p&gt;This would be the final scheme of our grid, showing the first four centers of each row to get a good view on what is going on. From the center &lt;em&gt;(0,0)&lt;/em&gt; we can see that the blue arrow takes a distance of twice the length of the hexagon height that sums up to &lt;strong&gt;2rsin60º&lt;/strong&gt;. The rest is going to be the same taking into account this offset. We modify our function to draw many lines as the last hexagon fits in the canvas height.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; theme=&quot;one-dark&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;function drawGrid(width, height) {
  for (let y = r; y + r * Math.sin(a) &amp;lt; height; y += r * Math.sin(a)) {
    for (let x = r, j = 0; x + r * (1 + Math.cos(a)) &amp;lt; width; x += r * (1 + Math.cos(a)), y += (-1) ** j++ * r * Math.sin(a)) {
      drawHexagon(x, y);
    }
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;Let’s put altogether and try it out!&lt;/p&gt;
&lt;h3 id=&quot;result-3&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#result-3&quot; aria-label=&quot;result 3 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Result&lt;/h3&gt;
&lt;iframe height=&quot;628&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;A Grid&quot; src=&quot;https://codepen.io/eperezcosano/embed/vYLPXYO?height=628&amp;theme-id=light&amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&apos;https://codepen.io/eperezcosano/pen/vYLPXYO&apos;&gt;A Grid&lt;/a&gt; by Ethan
  (&lt;a href=&apos;https://codepen.io/eperezcosano&apos;&gt;@eperezcosano&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;We have finally gotten a hex grid with just a few lines of code in JavaScript. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://github.com/SergiVera&quot;&gt;@SergiVera&lt;/a&gt; for helping me write this article.&lt;/em&gt;&lt;/p&gt;</content:encoded></item></channel></rss>